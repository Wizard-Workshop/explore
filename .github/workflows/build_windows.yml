# .github/workflows/windows_build.yml
name: Build - Windows

on:
  push: { branches: [main], tags: ["v*"] }

env:
  GODOT_VER: 4.4.1-stable          # tag/asset name on GitHub (dash)
  PRESET:    "Windows Desktop"     # export preset name

jobs:
  win-build:
    runs-on: windows-latest

    steps:
    # ── Checkout ────────────────────────────────────────────────────────────
    - uses: actions/checkout@v4
      with: { submodules: recursive }

    # ── Cache the editor + templates ────────────────────────────────────────
    #    (key bumped to v5 so we drop the bad cache once)
    - name: Cache Godot editor + templates
      id: godot-cache
      uses: actions/cache@v4
      with:
        path: |
          C:\godot
          ${{ env.USERPROFILE }}\AppData\Roaming\Godot\export_templates
        key: godot-win-${{ env.GODOT_VER }}-v5

    # ── Install editor + templates if the cache missed ──────────────────────
    - name: Install Godot editor + templates (if cache missed)
      if: steps.godot-cache.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        $base = "https://github.com/godotengine/godot/releases/download/${env:GODOT_VER}"

        # ▸ Editor -----------------------------------------------------------
        Invoke-WebRequest "$base/Godot_v${env:GODOT_VER}_win64.exe.zip" -OutFile godot.zip
        Expand-Archive godot.zip -DestinationPath C:\godot

        # ▸ Templates --------------------------------------------------------
        Invoke-WebRequest "$base/Godot_v${env:GODOT_VER}_export_templates.tpz" -OutFile tpl.tpz
        $tempTplDir = "C:\temp_tpl"
        New-Item -Type Directory -Force -Path $tempTplDir | Out-Null
        Expand-Archive tpl.tpz -DestinationPath $tempTplDir

        #      Godot expects 4.4.1.stable (dot) not 4.4.1-stable (dash)
        $dotVer = $env:GODOT_VER -replace '-', '.'
        $tplDir = "$env:APPDATA\Godot\export_templates\$dotVer"
        New-Item -Type Directory -Force -Path $tplDir | Out-Null
        Copy-Item "$tempTplDir\templates\*" $tplDir -Recurse -Force

    # ── Normalise template dir + filenames (runs EVERY build) ───────────────
    # ── Normalise template dir + filenames ──────────────────────────────────
    - name: Normalise template directory & filenames
      shell: pwsh
      run: |
        $tplParent = Join-Path $Env:APPDATA 'Godot\export_templates'
        $dashDir   = Join-Path $tplParent $Env:GODOT_VER              # 4.4.1-stable
        $dotDir    = Join-Path $tplParent ($Env:GODOT_VER -replace '-', '.')  # 4.4.1.stable

        # ┌ Rename dash → dot dir (if necessary)
        if ((Test-Path $dashDir) -and -not (Test-Path $dotDir)) {
          Write-Host "Renaming $dashDir → $dotDir"
          Move-Item $dashDir $dotDir
        } else {
          New-Item -ItemType Directory -Force -Path $dotDir | Out-Null
        }

        # ┌ Flatten nested 'windows' folder, if present
        $nested = Join-Path $dotDir 'windows'
        if (Test-Path $nested) {
          Write-Host "Flattening nested $nested"
          Copy-Item (Join-Path $nested '*') $dotDir -Recurse -Force
          Remove-Item $nested -Recurse -Force
        }

        # ┌ Ensure correct filenames (…_x86_64.exe)
        $mapping = @{
          'windows_debug.exe'   = 'windows_debug_x86_64.exe'
          'windows_release.exe' = 'windows_release_x86_64.exe'
        }
        foreach ($kvp in $mapping.GetEnumerator()) {
          $src = Join-Path $dotDir $kvp.Key
          $dst = Join-Path $dotDir $kvp.Value
          if ((Test-Path $src) -and -not (Test-Path $dst)) {
            Copy-Item $src $dst
          }
        }

        Write-Host "📦 Export-template contents after normalisation:"
        Get-ChildItem $dotDir -Recurse | ForEach-Object { Write-Host $_.FullName }


    # ── rcedit helper ───────────────────────────────────────────────────────
    - name: Install rcedit
      run: choco install rcedit --yes

    - name: Configure rcedit path in Godot
      shell: pwsh
      run: |
        $rcedit = (Get-Command rcedit).Source
        & "C:\godot\Godot_v${env:GODOT_VER}_win64.exe" `
            --headless --quit `
            --set editor/export/windows/rcedit "$rcedit"

    # ── Export the Windows build ────────────────────────────────────────────
    - name: Export Windows Desktop
      shell: pwsh
      run: |
        mkdir -Force build\windows

        & "C:\godot\Godot_v${env:GODOT_VER}_win64.exe" `
          --headless --verbose `
          --export-release "${env:PRESET}" "build/windows/Explore.exe" `
          2>&1 | Tee-Object -FilePath godot_export.log

        $exit = $LASTEXITCODE
        Get-Content godot_export.log                     # stream to console

        if ($exit -ne 0) { Write-Error "❌ Godot export failed ($exit)"; exit $exit }
        if (-not (Test-Path "build/windows/Explore.exe")) {
          Write-Error "❌ Godot did not produce Explore.exe"; exit 1
        }

    # ── Upload artefact ────────────────────────────────────────────────────
    - uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: build/windows/Explore.exe
